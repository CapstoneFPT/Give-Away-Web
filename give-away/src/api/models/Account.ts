/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountStatus } from './AccountStatus';
import {
    AccountStatusFromJSON,
    AccountStatusFromJSONTyped,
    AccountStatusToJSON,
} from './AccountStatus';
import type { Roles } from './Roles';
import {
    RolesFromJSON,
    RolesFromJSONTyped,
    RolesToJSON,
} from './Roles';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountId?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    passwordHash?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    passwordSalt?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    fullname?: string;
    /**
     * 
     * @type {Date}
     * @memberof Account
     */
    verifiedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    passwordResetToken?: string;
    /**
     * 
     * @type {Date}
     * @memberof Account
     */
    resetTokenExpires?: Date;
    /**
     * 
     * @type {Roles}
     * @memberof Account
     */
    role?: Roles;
    /**
     * 
     * @type {AccountStatus}
     * @memberof Account
     */
    status?: AccountStatus;
}

/**
 * Check if a given object implements the Account interface.
 */
export function instanceOfAccount(value: object): value is Account {
    return true;
}

export function AccountFromJSON(json: any): Account {
    return AccountFromJSONTyped(json, false);
}

export function AccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Account {
    if (json == null) {
        return json;
    }
    return {
        
        'accountId': json['accountId'] == null ? undefined : json['accountId'],
        'email': json['email'] == null ? undefined : json['email'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'passwordHash': json['passwordHash'] == null ? undefined : json['passwordHash'],
        'passwordSalt': json['passwordSalt'] == null ? undefined : json['passwordSalt'],
        'fullname': json['fullname'] == null ? undefined : json['fullname'],
        'verifiedAt': json['verifiedAt'] == null ? undefined : (new Date(json['verifiedAt'])),
        'passwordResetToken': json['passwordResetToken'] == null ? undefined : json['passwordResetToken'],
        'resetTokenExpires': json['resetTokenExpires'] == null ? undefined : (new Date(json['resetTokenExpires'])),
        'role': json['role'] == null ? undefined : RolesFromJSON(json['role']),
        'status': json['status'] == null ? undefined : AccountStatusFromJSON(json['status']),
    };
}

export function AccountToJSON(value?: Account | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'accountId': value['accountId'],
        'email': value['email'],
        'phone': value['phone'],
        'passwordHash': value['passwordHash'],
        'passwordSalt': value['passwordSalt'],
        'fullname': value['fullname'],
        'verifiedAt': value['verifiedAt'] == null ? undefined : ((value['verifiedAt'] as any).toISOString()),
        'passwordResetToken': value['passwordResetToken'],
        'resetTokenExpires': value['resetTokenExpires'] == null ? undefined : ((value['resetTokenExpires'] as any).toISOString()),
        'role': RolesToJSON(value['role']),
        'status': AccountStatusToJSON(value['status']),
    };
}

