/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Transaction } from './Transaction';
import {
    TransactionFromJSON,
    TransactionFromJSONTyped,
    TransactionToJSON,
} from './Transaction';
import type { WithdrawStatus } from './WithdrawStatus';
import {
    WithdrawStatusFromJSON,
    WithdrawStatusFromJSONTyped,
    WithdrawStatusToJSON,
} from './WithdrawStatus';
import type { Member } from './Member';
import {
    MemberFromJSON,
    MemberFromJSONTyped,
    MemberToJSON,
} from './Member';

/**
 * 
 * @export
 * @interface Withdraw
 */
export interface Withdraw {
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    withdrawId?: string;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    bank?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    bankAccountNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    bankAccountName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Withdraw
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof Withdraw
     */
    memberId?: string;
    /**
     * 
     * @type {Member}
     * @memberof Withdraw
     */
    member?: Member;
    /**
     * 
     * @type {Transaction}
     * @memberof Withdraw
     */
    transaction?: Transaction;
    /**
     * 
     * @type {WithdrawStatus}
     * @memberof Withdraw
     */
    status?: WithdrawStatus;
    /**
     * 
     * @type {Date}
     * @memberof Withdraw
     */
    createdDate?: Date;
}

/**
 * Check if a given object implements the Withdraw interface.
 */
export function instanceOfWithdraw(value: object): value is Withdraw {
    return true;
}

export function WithdrawFromJSON(json: any): Withdraw {
    return WithdrawFromJSONTyped(json, false);
}

export function WithdrawFromJSONTyped(json: any, ignoreDiscriminator: boolean): Withdraw {
    if (json == null) {
        return json;
    }
    return {
        
        'withdrawId': json['withdrawId'] == null ? undefined : json['withdrawId'],
        'bank': json['bank'] == null ? undefined : json['bank'],
        'bankAccountNumber': json['bankAccountNumber'] == null ? undefined : json['bankAccountNumber'],
        'bankAccountName': json['bankAccountName'] == null ? undefined : json['bankAccountName'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'memberId': json['memberId'] == null ? undefined : json['memberId'],
        'member': json['member'] == null ? undefined : MemberFromJSON(json['member']),
        'transaction': json['transaction'] == null ? undefined : TransactionFromJSON(json['transaction']),
        'status': json['status'] == null ? undefined : WithdrawStatusFromJSON(json['status']),
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
    };
}

export function WithdrawToJSON(value?: Withdraw | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'withdrawId': value['withdrawId'],
        'bank': value['bank'],
        'bankAccountNumber': value['bankAccountNumber'],
        'bankAccountName': value['bankAccountName'],
        'amount': value['amount'],
        'memberId': value['memberId'],
        'member': MemberToJSON(value['member']),
        'transaction': TransactionToJSON(value['transaction']),
        'status': WithdrawStatusToJSON(value['status']),
        'createdDate': value['createdDate'] == null ? undefined : ((value['createdDate']).toISOString()),
    };
}

