/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Account } from './Account';
import {
    AccountFromJSON,
    AccountFromJSONTyped,
    AccountToJSON,
} from './Account';
import type { OrderStatus } from './OrderStatus';
import {
    OrderStatusFromJSON,
    OrderStatusFromJSONTyped,
    OrderStatusToJSON,
} from './OrderStatus';
import type { PurchaseType } from './PurchaseType';
import {
    PurchaseTypeFromJSON,
    PurchaseTypeFromJSONTyped,
    PurchaseTypeToJSON,
} from './PurchaseType';
import type { Transaction } from './Transaction';
import {
    TransactionFromJSON,
    TransactionFromJSONTyped,
    TransactionToJSON,
} from './Transaction';
import type { PaymentMethod } from './PaymentMethod';
import {
    PaymentMethodFromJSON,
    PaymentMethodFromJSONTyped,
    PaymentMethodToJSON,
} from './PaymentMethod';
import type { Bid } from './Bid';
import {
    BidFromJSON,
    BidFromJSONTyped,
    BidToJSON,
} from './Bid';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderId?: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    totalPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    orderCode?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    createdDate?: Date;
    /**
     * 
     * @type {PaymentMethod}
     * @memberof Order
     */
    paymentMethod?: PaymentMethod;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    paymentDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof Order
     */
    completedDate?: Date | null;
    /**
     * 
     * @type {Account}
     * @memberof Order
     */
    member?: Account;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    memberId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    bidId?: string | null;
    /**
     * 
     * @type {Bid}
     * @memberof Order
     */
    bid?: Bid;
    /**
     * 
     * @type {OrderStatus}
     * @memberof Order
     */
    status?: OrderStatus;
    /**
     * 
     * @type {PurchaseType}
     * @memberof Order
     */
    purchaseType?: PurchaseType;
    /**
     * 
     * @type {Transaction}
     * @memberof Order
     */
    transaction?: Transaction;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    recipientName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    phone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    address?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    email?: string | null;
}

/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'orderId': json['orderId'] == null ? undefined : json['orderId'],
        'totalPrice': json['totalPrice'] == null ? undefined : json['totalPrice'],
        'orderCode': json['orderCode'] == null ? undefined : json['orderCode'],
        'createdDate': json['createdDate'] == null ? undefined : (new Date(json['createdDate'])),
        'paymentMethod': json['paymentMethod'] == null ? undefined : PaymentMethodFromJSON(json['paymentMethod']),
        'paymentDate': json['paymentDate'] == null ? undefined : (new Date(json['paymentDate'])),
        'completedDate': json['completedDate'] == null ? undefined : (new Date(json['completedDate'])),
        'member': json['member'] == null ? undefined : AccountFromJSON(json['member']),
        'memberId': json['memberId'] == null ? undefined : json['memberId'],
        'bidId': json['bidId'] == null ? undefined : json['bidId'],
        'bid': json['bid'] == null ? undefined : BidFromJSON(json['bid']),
        'status': json['status'] == null ? undefined : OrderStatusFromJSON(json['status']),
        'purchaseType': json['purchaseType'] == null ? undefined : PurchaseTypeFromJSON(json['purchaseType']),
        'transaction': json['transaction'] == null ? undefined : TransactionFromJSON(json['transaction']),
        'recipientName': json['recipientName'] == null ? undefined : json['recipientName'],
        'phone': json['phone'] == null ? undefined : json['phone'],
        'address': json['address'] == null ? undefined : json['address'],
        'email': json['email'] == null ? undefined : json['email'],
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'orderId': value['orderId'],
        'totalPrice': value['totalPrice'],
        'orderCode': value['orderCode'],
        'createdDate': value['createdDate'] == null ? undefined : ((value['createdDate']).toISOString()),
        'paymentMethod': PaymentMethodToJSON(value['paymentMethod']),
        'paymentDate': value['paymentDate'] == null ? undefined : ((value['paymentDate'] as any).toISOString()),
        'completedDate': value['completedDate'] == null ? undefined : ((value['completedDate'] as any).toISOString()),
        'member': AccountToJSON(value['member']),
        'memberId': value['memberId'],
        'bidId': value['bidId'],
        'bid': BidToJSON(value['bid']),
        'status': OrderStatusToJSON(value['status']),
        'purchaseType': PurchaseTypeToJSON(value['purchaseType']),
        'transaction': TransactionToJSON(value['transaction']),
        'recipientName': value['recipientName'],
        'phone': value['phone'],
        'address': value['address'],
        'email': value['email'],
    };
}

