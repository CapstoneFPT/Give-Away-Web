/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRefundRequest,
  RefundResponseListResult,
  RefundResponseResult,
  RefundStatus,
} from '../models/index';
import {
    CreateRefundRequestFromJSON,
    CreateRefundRequestToJSON,
    RefundResponseListResultFromJSON,
    RefundResponseListResultToJSON,
    RefundResponseResultFromJSON,
    RefundResponseResultToJSON,
    RefundStatusFromJSON,
    RefundStatusToJSON,
} from '../models/index';

export interface ApiRefundsPostRequest {
    createRefundRequest?: Array<CreateRefundRequest>;
}

export interface ApiRefundsRefundIdApprovalPutRequest {
    refundId: string;
    refundStatus?: RefundStatus;
}

export interface ApiRefundsRefundIdGetRequest {
    refundId: string;
}

/**
 * 
 */
export class RefundApi extends runtime.BaseAPI {

    /**
     */
    async apiRefundsPostRaw(requestParameters: ApiRefundsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundResponseListResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/refunds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['createRefundRequest']!.map(CreateRefundRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundResponseListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiRefundsPost(requestParameters: ApiRefundsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundResponseListResult> {
        const response = await this.apiRefundsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRefundsRefundIdApprovalPutRaw(requestParameters: ApiRefundsRefundIdApprovalPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundResponseResult>> {
        if (requestParameters['refundId'] == null) {
            throw new runtime.RequiredError(
                'refundId',
                'Required parameter "refundId" was null or undefined when calling apiRefundsRefundIdApprovalPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['refundStatus'] != null) {
            queryParameters['refundStatus'] = requestParameters['refundStatus'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/refunds/{refundId}/approval`.replace(`{${"refundId"}}`, encodeURIComponent(String(requestParameters['refundId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiRefundsRefundIdApprovalPut(requestParameters: ApiRefundsRefundIdApprovalPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundResponseResult> {
        const response = await this.apiRefundsRefundIdApprovalPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRefundsRefundIdGetRaw(requestParameters: ApiRefundsRefundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefundResponseResult>> {
        if (requestParameters['refundId'] == null) {
            throw new runtime.RequiredError(
                'refundId',
                'Required parameter "refundId" was null or undefined when calling apiRefundsRefundIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/refunds/{refundId}`.replace(`{${"refundId"}}`, encodeURIComponent(String(requestParameters['refundId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiRefundsRefundIdGet(requestParameters: ApiRefundsRefundIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefundResponseResult> {
        const response = await this.apiRefundsRefundIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
