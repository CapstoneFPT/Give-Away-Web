/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FashionItemOrderDetailResponsePaginationResponseResult,
  FashionItemOrderDetailResponseResult,
  OrderResponseResult,
  PayWithPointsResponse,
  PurchaseOrderRequest,
  StringResult,
  VnPayPurchaseResponse,
} from '../models/index';
import {
    FashionItemOrderDetailResponsePaginationResponseResultFromJSON,
    FashionItemOrderDetailResponsePaginationResponseResultToJSON,
    FashionItemOrderDetailResponseResultFromJSON,
    FashionItemOrderDetailResponseResultToJSON,
    OrderResponseResultFromJSON,
    OrderResponseResultToJSON,
    PayWithPointsResponseFromJSON,
    PayWithPointsResponseToJSON,
    PurchaseOrderRequestFromJSON,
    PurchaseOrderRequestToJSON,
    StringResultFromJSON,
    StringResultToJSON,
    VnPayPurchaseResponseFromJSON,
    VnPayPurchaseResponseToJSON,
} from '../models/index';

export interface ApiOrdersOrderIdCancelPutRequest {
    orderId: string;
}

export interface ApiOrdersOrderIdConfirmDeliveriedPutRequest {
    orderId: string;
}

export interface ApiOrdersOrderIdOrderdetailsGetRequest {
    orderId: string;
    pageNumber?: number;
    pageSize?: number;
    shopId?: string;
}

export interface ApiOrdersOrderIdPayPointsPostRequest {
    orderId: string;
    purchaseOrderRequest?: PurchaseOrderRequest;
}

export interface ApiOrdersOrderIdPayVnpayPostRequest {
    orderId: string;
    purchaseOrderRequest?: PurchaseOrderRequest;
}

export interface ApiOrdersOrderdetailsOrderdetailIdGetRequest {
    orderdetailId: string;
}

/**
 * 
 */
export class OrderApi extends runtime.BaseAPI {

    /**
     */
    async apiOrdersOrderIdCancelPutRaw(requestParameters: ApiOrdersOrderIdCancelPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResult>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling apiOrdersOrderIdCancelPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/{OrderId}/cancel`.replace(`{${"OrderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResultFromJSON(jsonValue));
    }

    /**
     */
    async apiOrdersOrderIdCancelPut(requestParameters: ApiOrdersOrderIdCancelPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResult> {
        const response = await this.apiOrdersOrderIdCancelPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrdersOrderIdConfirmDeliveriedPutRaw(requestParameters: ApiOrdersOrderIdConfirmDeliveriedPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OrderResponseResult>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling apiOrdersOrderIdConfirmDeliveriedPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/{OrderId}/confirm-deliveried`.replace(`{${"OrderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiOrdersOrderIdConfirmDeliveriedPut(requestParameters: ApiOrdersOrderIdConfirmDeliveriedPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OrderResponseResult> {
        const response = await this.apiOrdersOrderIdConfirmDeliveriedPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrdersOrderIdOrderdetailsGetRaw(requestParameters: ApiOrdersOrderIdOrderdetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FashionItemOrderDetailResponsePaginationResponseResult>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling apiOrdersOrderIdOrderdetailsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['shopId'] != null) {
            queryParameters['ShopId'] = requestParameters['shopId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/{OrderId}/orderdetails`.replace(`{${"OrderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FashionItemOrderDetailResponsePaginationResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiOrdersOrderIdOrderdetailsGet(requestParameters: ApiOrdersOrderIdOrderdetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FashionItemOrderDetailResponsePaginationResponseResult> {
        const response = await this.apiOrdersOrderIdOrderdetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrdersOrderIdPayPointsPostRaw(requestParameters: ApiOrdersOrderIdPayPointsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayWithPointsResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling apiOrdersOrderIdPayPointsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/{orderId}/pay/points`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseOrderRequestToJSON(requestParameters['purchaseOrderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayWithPointsResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrdersOrderIdPayPointsPost(requestParameters: ApiOrdersOrderIdPayPointsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayWithPointsResponse> {
        const response = await this.apiOrdersOrderIdPayPointsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrdersOrderIdPayVnpayPostRaw(requestParameters: ApiOrdersOrderIdPayVnpayPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VnPayPurchaseResponse>> {
        if (requestParameters['orderId'] == null) {
            throw new runtime.RequiredError(
                'orderId',
                'Required parameter "orderId" was null or undefined when calling apiOrdersOrderIdPayVnpayPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/{orderId}/pay/vnpay`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters['orderId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchaseOrderRequestToJSON(requestParameters['purchaseOrderRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VnPayPurchaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOrdersOrderIdPayVnpayPost(requestParameters: ApiOrdersOrderIdPayVnpayPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VnPayPurchaseResponse> {
        const response = await this.apiOrdersOrderIdPayVnpayPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrdersOrderdetailsOrderdetailIdGetRaw(requestParameters: ApiOrdersOrderdetailsOrderdetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FashionItemOrderDetailResponseResult>> {
        if (requestParameters['orderdetailId'] == null) {
            throw new runtime.RequiredError(
                'orderdetailId',
                'Required parameter "orderdetailId" was null or undefined when calling apiOrdersOrderdetailsOrderdetailIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/orderdetails/{OrderdetailId}`.replace(`{${"OrderdetailId"}}`, encodeURIComponent(String(requestParameters['orderdetailId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FashionItemOrderDetailResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiOrdersOrderdetailsOrderdetailIdGet(requestParameters: ApiOrdersOrderdetailsOrderdetailIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FashionItemOrderDetailResponseResult> {
        const response = await this.apiOrdersOrderdetailsOrderdetailIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOrdersPaymentReturnGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/orders/payment-return`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiOrdersPaymentReturnGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiOrdersPaymentReturnGetRaw(initOverrides);
    }

}
