/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuctionDepositDetailResponse,
  AuctionDepositListResponsePaginationResponse,
  AuctionDetailResponse,
  AuctionListResponsePaginationResponse,
  BidDetailResponse,
  BidListResponsePaginationResponse,
  CreateAuctionDepositRequest,
  CreateAuctionRequest,
  CreateBidRequest,
  UpdateAuctionRequest,
  UpdateBidRequest,
} from '../models/index';
import {
    AuctionDepositDetailResponseFromJSON,
    AuctionDepositDetailResponseToJSON,
    AuctionDepositListResponsePaginationResponseFromJSON,
    AuctionDepositListResponsePaginationResponseToJSON,
    AuctionDetailResponseFromJSON,
    AuctionDetailResponseToJSON,
    AuctionListResponsePaginationResponseFromJSON,
    AuctionListResponsePaginationResponseToJSON,
    BidDetailResponseFromJSON,
    BidDetailResponseToJSON,
    BidListResponsePaginationResponseFromJSON,
    BidListResponsePaginationResponseToJSON,
    CreateAuctionDepositRequestFromJSON,
    CreateAuctionDepositRequestToJSON,
    CreateAuctionRequestFromJSON,
    CreateAuctionRequestToJSON,
    CreateBidRequestFromJSON,
    CreateBidRequestToJSON,
    UpdateAuctionRequestFromJSON,
    UpdateAuctionRequestToJSON,
    UpdateBidRequestFromJSON,
    UpdateBidRequestToJSON,
} from '../models/index';

export interface ApiAuctionsIdBidsBidIdDeleteRequest {
    id: string;
    bidId: string;
}

export interface ApiAuctionsIdBidsBidIdGetRequest {
    id: string;
    bidId: string;
}

export interface ApiAuctionsIdBidsBidIdPutRequest {
    id: string;
    bidId: string;
    updateBidRequest?: UpdateBidRequest;
}

export interface ApiAuctionsIdBidsGetRequest {
    id: string;
}

export interface ApiAuctionsIdBidsPostRequest {
    id: string;
    createBidRequest?: CreateBidRequest;
}

export interface ApiAuctionsIdDeleteRequest {
    id: string;
}

export interface ApiAuctionsIdDepositsDepositIdDeleteRequest {
    id: string;
    depositId: string;
}

export interface ApiAuctionsIdDepositsDepositIdGetRequest {
    id: string;
    depositId: string;
}

export interface ApiAuctionsIdDepositsDepositIdPutRequest {
    id: string;
    depositId: string;
    body?: object;
}

export interface ApiAuctionsIdDepositsGetRequest {
    id: string;
}

export interface ApiAuctionsIdDepositsPostRequest {
    id: string;
    createAuctionDepositRequest?: CreateAuctionDepositRequest;
}

export interface ApiAuctionsIdGetRequest {
    id: string;
}

export interface ApiAuctionsIdPutRequest {
    id: string;
    updateAuctionRequest?: UpdateAuctionRequest;
}

export interface ApiAuctionsPostRequest {
    createAuctionRequest?: CreateAuctionRequest;
}

/**
 * 
 */
export class AuctionApi extends runtime.BaseAPI {

    /**
     */
    async apiAuctionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuctionListResponsePaginationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionListResponsePaginationResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuctionListResponsePaginationResponse> {
        const response = await this.apiAuctionsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdBidsBidIdDeleteRaw(requestParameters: ApiAuctionsIdBidsBidIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdBidsBidIdDelete().'
            );
        }

        if (requestParameters['bidId'] == null) {
            throw new runtime.RequiredError(
                'bidId',
                'Required parameter "bidId" was null or undefined when calling apiAuctionsIdBidsBidIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/bids/{bidId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"bidId"}}`, encodeURIComponent(String(requestParameters['bidId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuctionsIdBidsBidIdDelete(requestParameters: ApiAuctionsIdBidsBidIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuctionsIdBidsBidIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuctionsIdBidsBidIdGetRaw(requestParameters: ApiAuctionsIdBidsBidIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BidDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdBidsBidIdGet().'
            );
        }

        if (requestParameters['bidId'] == null) {
            throw new runtime.RequiredError(
                'bidId',
                'Required parameter "bidId" was null or undefined when calling apiAuctionsIdBidsBidIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/bids/{bidId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"bidId"}}`, encodeURIComponent(String(requestParameters['bidId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BidDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdBidsBidIdGet(requestParameters: ApiAuctionsIdBidsBidIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BidDetailResponse> {
        const response = await this.apiAuctionsIdBidsBidIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdBidsBidIdPutRaw(requestParameters: ApiAuctionsIdBidsBidIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BidDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdBidsBidIdPut().'
            );
        }

        if (requestParameters['bidId'] == null) {
            throw new runtime.RequiredError(
                'bidId',
                'Required parameter "bidId" was null or undefined when calling apiAuctionsIdBidsBidIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/bids/{bidId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"bidId"}}`, encodeURIComponent(String(requestParameters['bidId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateBidRequestToJSON(requestParameters['updateBidRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BidDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdBidsBidIdPut(requestParameters: ApiAuctionsIdBidsBidIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BidDetailResponse> {
        const response = await this.apiAuctionsIdBidsBidIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdBidsGetRaw(requestParameters: ApiAuctionsIdBidsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BidListResponsePaginationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdBidsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/bids`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BidListResponsePaginationResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdBidsGet(requestParameters: ApiAuctionsIdBidsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BidListResponsePaginationResponse> {
        const response = await this.apiAuctionsIdBidsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdBidsPostRaw(requestParameters: ApiAuctionsIdBidsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BidDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdBidsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/bids`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBidRequestToJSON(requestParameters['createBidRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BidDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdBidsPost(requestParameters: ApiAuctionsIdBidsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BidDetailResponse> {
        const response = await this.apiAuctionsIdBidsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdDeleteRaw(requestParameters: ApiAuctionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuctionsIdDelete(requestParameters: ApiAuctionsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuctionsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuctionsIdDepositsDepositIdDeleteRaw(requestParameters: ApiAuctionsIdDepositsDepositIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdDepositsDepositIdDelete().'
            );
        }

        if (requestParameters['depositId'] == null) {
            throw new runtime.RequiredError(
                'depositId',
                'Required parameter "depositId" was null or undefined when calling apiAuctionsIdDepositsDepositIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/deposits/{depositId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"depositId"}}`, encodeURIComponent(String(requestParameters['depositId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAuctionsIdDepositsDepositIdDelete(requestParameters: ApiAuctionsIdDepositsDepositIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiAuctionsIdDepositsDepositIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiAuctionsIdDepositsDepositIdGetRaw(requestParameters: ApiAuctionsIdDepositsDepositIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuctionDepositDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdDepositsDepositIdGet().'
            );
        }

        if (requestParameters['depositId'] == null) {
            throw new runtime.RequiredError(
                'depositId',
                'Required parameter "depositId" was null or undefined when calling apiAuctionsIdDepositsDepositIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/deposits/{depositId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"depositId"}}`, encodeURIComponent(String(requestParameters['depositId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionDepositDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdDepositsDepositIdGet(requestParameters: ApiAuctionsIdDepositsDepositIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuctionDepositDetailResponse> {
        const response = await this.apiAuctionsIdDepositsDepositIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdDepositsDepositIdPutRaw(requestParameters: ApiAuctionsIdDepositsDepositIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuctionDepositDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdDepositsDepositIdPut().'
            );
        }

        if (requestParameters['depositId'] == null) {
            throw new runtime.RequiredError(
                'depositId',
                'Required parameter "depositId" was null or undefined when calling apiAuctionsIdDepositsDepositIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/deposits/{depositId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"depositId"}}`, encodeURIComponent(String(requestParameters['depositId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionDepositDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdDepositsDepositIdPut(requestParameters: ApiAuctionsIdDepositsDepositIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuctionDepositDetailResponse> {
        const response = await this.apiAuctionsIdDepositsDepositIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdDepositsGetRaw(requestParameters: ApiAuctionsIdDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuctionDepositListResponsePaginationResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdDepositsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/deposits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionDepositListResponsePaginationResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdDepositsGet(requestParameters: ApiAuctionsIdDepositsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuctionDepositListResponsePaginationResponse> {
        const response = await this.apiAuctionsIdDepositsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdDepositsPostRaw(requestParameters: ApiAuctionsIdDepositsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuctionDepositDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdDepositsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}/deposits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuctionDepositRequestToJSON(requestParameters['createAuctionDepositRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionDepositDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdDepositsPost(requestParameters: ApiAuctionsIdDepositsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuctionDepositDetailResponse> {
        const response = await this.apiAuctionsIdDepositsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdGetRaw(requestParameters: ApiAuctionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuctionDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdGet(requestParameters: ApiAuctionsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuctionDetailResponse> {
        const response = await this.apiAuctionsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsIdPutRaw(requestParameters: ApiAuctionsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuctionDetailResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiAuctionsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAuctionRequestToJSON(requestParameters['updateAuctionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsIdPut(requestParameters: ApiAuctionsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuctionDetailResponse> {
        const response = await this.apiAuctionsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiAuctionsPostRaw(requestParameters: ApiAuctionsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuctionDetailResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auctions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAuctionRequestToJSON(requestParameters['createAuctionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuctionsPost(requestParameters: ApiAuctionsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuctionDetailResponse> {
        const response = await this.apiAuctionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
