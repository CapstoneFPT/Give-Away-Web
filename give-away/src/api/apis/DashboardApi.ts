/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MonthlyPayoutsResponse,
  MonthlyRevenueDto,
  ShopRevenueDto,
  SystemRevenueDto,
} from '../models/index';
import {
    MonthlyPayoutsResponseFromJSON,
    MonthlyPayoutsResponseToJSON,
    MonthlyRevenueDtoFromJSON,
    MonthlyRevenueDtoToJSON,
    ShopRevenueDtoFromJSON,
    ShopRevenueDtoToJSON,
    SystemRevenueDtoFromJSON,
    SystemRevenueDtoToJSON,
} from '../models/index';

export interface ApiDashboardShopShopIdOfflineRevenueGetRequest {
    shopId: string;
    startDate?: Date;
    endDate?: Date;
}

export interface ApiDashboardSystemRevenueGetRequest {
    startDate?: Date;
    endDate?: Date;
}

export interface MonthlyPayoutsGetRequest {
    year?: number;
    shopId?: string;
}

export interface ShopShopIdMonthlyOfflineRevenueGetRequest {
    shopId: string;
    year?: number;
}

export interface SystemMonthlyRevenueGetRequest {
    year?: number;
}

/**
 * 
 */
export class DashboardApi extends runtime.BaseAPI {

    /**
     */
    async apiDashboardShopShopIdOfflineRevenueGetRaw(requestParameters: ApiDashboardShopShopIdOfflineRevenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShopRevenueDto>> {
        if (requestParameters['shopId'] == null) {
            throw new runtime.RequiredError(
                'shopId',
                'Required parameter "shopId" was null or undefined when calling apiDashboardShopShopIdOfflineRevenueGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/dashboard/shop/{shopId}/offline-revenue`.replace(`{${"shopId"}}`, encodeURIComponent(String(requestParameters['shopId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShopRevenueDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiDashboardShopShopIdOfflineRevenueGet(requestParameters: ApiDashboardShopShopIdOfflineRevenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShopRevenueDto> {
        const response = await this.apiDashboardShopShopIdOfflineRevenueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiDashboardSystemRevenueGetRaw(requestParameters: ApiDashboardSystemRevenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemRevenueDto>> {
        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['startDate'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['endDate'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/dashboard/system/revenue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemRevenueDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiDashboardSystemRevenueGet(requestParameters: ApiDashboardSystemRevenueGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemRevenueDto> {
        const response = await this.apiDashboardSystemRevenueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async monthlyPayoutsGetRaw(requestParameters: MonthlyPayoutsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyPayoutsResponse>> {
        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        if (requestParameters['shopId'] != null) {
            queryParameters['shopId'] = requestParameters['shopId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monthly-payouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonthlyPayoutsResponseFromJSON(jsonValue));
    }

    /**
     */
    async monthlyPayoutsGet(requestParameters: MonthlyPayoutsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyPayoutsResponse> {
        const response = await this.monthlyPayoutsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async shopShopIdMonthlyOfflineRevenueGetRaw(requestParameters: ShopShopIdMonthlyOfflineRevenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyRevenueDto>> {
        if (requestParameters['shopId'] == null) {
            throw new runtime.RequiredError(
                'shopId',
                'Required parameter "shopId" was null or undefined when calling shopShopIdMonthlyOfflineRevenueGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/shop/{shopId}/monthly-offline-revenue`.replace(`{${"shopId"}}`, encodeURIComponent(String(requestParameters['shopId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonthlyRevenueDtoFromJSON(jsonValue));
    }

    /**
     */
    async shopShopIdMonthlyOfflineRevenueGet(requestParameters: ShopShopIdMonthlyOfflineRevenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyRevenueDto> {
        const response = await this.shopShopIdMonthlyOfflineRevenueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async systemMonthlyRevenueGetRaw(requestParameters: SystemMonthlyRevenueGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonthlyRevenueDto>> {
        const queryParameters: any = {};

        if (requestParameters['year'] != null) {
            queryParameters['year'] = requestParameters['year'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/monthly-revenue`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonthlyRevenueDtoFromJSON(jsonValue));
    }

    /**
     */
    async systemMonthlyRevenueGet(requestParameters: SystemMonthlyRevenueGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonthlyRevenueDto> {
        const response = await this.systemMonthlyRevenueGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
