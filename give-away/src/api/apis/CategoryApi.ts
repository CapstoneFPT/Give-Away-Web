/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryListResult,
  CategoryRequest,
  CategoryResult,
  FashionItemDetailResponsePaginationResponseResult,
  FashionItemStatus,
} from '../models/index';
import {
    CategoryListResultFromJSON,
    CategoryListResultToJSON,
    CategoryRequestFromJSON,
    CategoryRequestToJSON,
    CategoryResultFromJSON,
    CategoryResultToJSON,
    FashionItemDetailResponsePaginationResponseResultFromJSON,
    FashionItemDetailResponsePaginationResponseResultToJSON,
    FashionItemStatusFromJSON,
    FashionItemStatusToJSON,
} from '../models/index';

export interface ApiCategoriesCategoryIdFahsionitemsGetRequest {
    categoryId: string;
    searchTerm?: string;
    pageNumber?: number;
    pageSize?: number;
    status?: FashionItemStatus;
    type?: string;
    shopId?: string;
}

export interface ApiCategoriesCategoryIdGetRequest {
    categoryId: string;
}

export interface ApiCategoriesParentIdPostRequest {
    parentId: string;
    categoryRequest?: CategoryRequest;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     */
    async apiCategoriesCategoryIdFahsionitemsGetRaw(requestParameters: ApiCategoriesCategoryIdFahsionitemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FashionItemDetailResponsePaginationResponseResult>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling apiCategoriesCategoryIdFahsionitemsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchTerm'] != null) {
            queryParameters['SearchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['Status'] = requestParameters['status'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['Type'] = requestParameters['type'];
        }

        if (requestParameters['shopId'] != null) {
            queryParameters['ShopId'] = requestParameters['shopId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/{categoryId}/fahsionitems`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FashionItemDetailResponsePaginationResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesCategoryIdFahsionitemsGet(requestParameters: ApiCategoriesCategoryIdFahsionitemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FashionItemDetailResponsePaginationResponseResult> {
        const response = await this.apiCategoriesCategoryIdFahsionitemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesCategoryIdGetRaw(requestParameters: ApiCategoriesCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryListResult>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling apiCategoriesCategoryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesCategoryIdGet(requestParameters: ApiCategoriesCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryListResult> {
        const response = await this.apiCategoriesCategoryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryListResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryListResult> {
        const response = await this.apiCategoriesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesParentIdPostRaw(requestParameters: ApiCategoriesParentIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryResult>> {
        if (requestParameters['parentId'] == null) {
            throw new runtime.RequiredError(
                'parentId',
                'Required parameter "parentId" was null or undefined when calling apiCategoriesParentIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/{parentId}`.replace(`{${"parentId"}}`, encodeURIComponent(String(requestParameters['parentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryRequestToJSON(requestParameters['categoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesParentIdPost(requestParameters: ApiCategoriesParentIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryResult> {
        const response = await this.apiCategoriesParentIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
