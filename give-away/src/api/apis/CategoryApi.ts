/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryLeavesResponse,
  CategoryListResult,
  CategoryResult,
  CategoryStatus,
  CategoryTreeResult,
  CreateCategoryRequest,
  FashionItemDetailResponsePaginationResponseResult,
  FashionItemStatus,
  FashionItemType,
  GenderType,
} from '../models/index';
import {
    CategoryLeavesResponseFromJSON,
    CategoryLeavesResponseToJSON,
    CategoryListResultFromJSON,
    CategoryListResultToJSON,
    CategoryResultFromJSON,
    CategoryResultToJSON,
    CategoryStatusFromJSON,
    CategoryStatusToJSON,
    CategoryTreeResultFromJSON,
    CategoryTreeResultToJSON,
    CreateCategoryRequestFromJSON,
    CreateCategoryRequestToJSON,
    FashionItemDetailResponsePaginationResponseResultFromJSON,
    FashionItemDetailResponsePaginationResponseResultToJSON,
    FashionItemStatusFromJSON,
    FashionItemStatusToJSON,
    FashionItemTypeFromJSON,
    FashionItemTypeToJSON,
    GenderTypeFromJSON,
    GenderTypeToJSON,
} from '../models/index';

export interface ApiCategoriesCategoryIdFahsionitemsGetRequest {
    categoryId: string;
    searchTerm?: string;
    pageNumber?: number;
    pageSize?: number;
    memberId?: string;
    status?: Array<FashionItemStatus>;
    type?: Array<FashionItemType>;
    shopId?: string;
    genderType?: GenderType;
}

export interface ApiCategoriesCategoryIdGetRequest {
    categoryId: string;
}

export interface ApiCategoriesCategoryIdPostRequest {
    categoryId: string;
    createCategoryRequest?: CreateCategoryRequest;
}

export interface ApiCategoriesConditionGetRequest {
    categoryId?: string;
    searchName?: string;
    parentId?: string;
    level?: number;
    status?: CategoryStatus;
}

export interface ApiCategoriesLeavesGetRequest {
    shopId?: string;
}

export interface ApiCategoriesTreeGetRequest {
    shopId?: string;
    rootCategoryId?: string;
}

/**
 * 
 */
export class CategoryApi extends runtime.BaseAPI {

    /**
     */
    async apiCategoriesCategoryIdFahsionitemsGetRaw(requestParameters: ApiCategoriesCategoryIdFahsionitemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FashionItemDetailResponsePaginationResponseResult>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling apiCategoriesCategoryIdFahsionitemsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['searchTerm'] != null) {
            queryParameters['SearchTerm'] = requestParameters['searchTerm'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['PageNumber'] = requestParameters['pageNumber'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['memberId'] != null) {
            queryParameters['MemberId'] = requestParameters['memberId'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['Status'] = requestParameters['status'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['Type'] = requestParameters['type'];
        }

        if (requestParameters['shopId'] != null) {
            queryParameters['ShopId'] = requestParameters['shopId'];
        }

        if (requestParameters['genderType'] != null) {
            queryParameters['GenderType'] = requestParameters['genderType'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/{categoryId}/fahsionitems`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FashionItemDetailResponsePaginationResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesCategoryIdFahsionitemsGet(requestParameters: ApiCategoriesCategoryIdFahsionitemsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FashionItemDetailResponsePaginationResponseResult> {
        const response = await this.apiCategoriesCategoryIdFahsionitemsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesCategoryIdGetRaw(requestParameters: ApiCategoriesCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryListResult>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling apiCategoriesCategoryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesCategoryIdGet(requestParameters: ApiCategoriesCategoryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryListResult> {
        const response = await this.apiCategoriesCategoryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesCategoryIdPostRaw(requestParameters: ApiCategoriesCategoryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryResult>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling apiCategoriesCategoryIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/{categoryId}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCategoryRequestToJSON(requestParameters['createCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesCategoryIdPost(requestParameters: ApiCategoriesCategoryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryResult> {
        const response = await this.apiCategoriesCategoryIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesConditionGetRaw(requestParameters: ApiCategoriesConditionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryListResult>> {
        const queryParameters: any = {};

        if (requestParameters['categoryId'] != null) {
            queryParameters['CategoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['searchName'] != null) {
            queryParameters['SearchName'] = requestParameters['searchName'];
        }

        if (requestParameters['parentId'] != null) {
            queryParameters['ParentId'] = requestParameters['parentId'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['Level'] = requestParameters['level'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['Status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/condition`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesConditionGet(requestParameters: ApiCategoriesConditionGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryListResult> {
        const response = await this.apiCategoriesConditionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryListResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryListResult> {
        const response = await this.apiCategoriesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesLeavesGetRaw(requestParameters: ApiCategoriesLeavesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryLeavesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['shopId'] != null) {
            queryParameters['shopId'] = requestParameters['shopId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/leaves`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryLeavesResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesLeavesGet(requestParameters: ApiCategoriesLeavesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryLeavesResponse> {
        const response = await this.apiCategoriesLeavesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCategoriesTreeGetRaw(requestParameters: ApiCategoriesTreeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryTreeResult>> {
        const queryParameters: any = {};

        if (requestParameters['shopId'] != null) {
            queryParameters['shopId'] = requestParameters['shopId'];
        }

        if (requestParameters['rootCategoryId'] != null) {
            queryParameters['rootCategoryId'] = requestParameters['rootCategoryId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/categories/tree`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryTreeResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCategoriesTreeGet(requestParameters: ApiCategoriesTreeGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryTreeResult> {
        const response = await this.apiCategoriesTreeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
