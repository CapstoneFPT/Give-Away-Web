/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PointPackageDetailResponse,
  PointPackageListResponsePaginationResponse,
  PointPackageStatus,
  PurchasePointPackageRequest,
} from '../models/index';
import {
    PointPackageDetailResponseFromJSON,
    PointPackageDetailResponseToJSON,
    PointPackageListResponsePaginationResponseFromJSON,
    PointPackageListResponsePaginationResponseToJSON,
    PointPackageStatusFromJSON,
    PointPackageStatusToJSON,
    PurchasePointPackageRequestFromJSON,
    PurchasePointPackageRequestToJSON,
} from '../models/index';

export interface ApiPointpackagesGetRequest {
    page?: number;
    pageSize?: number;
    status?: Array<PointPackageStatus>;
}

export interface ApiPointpackagesPointPackageIdGetRequest {
    pointPackageId: string;
}

export interface ApiPointpackagesPointPackageIdPurchasePostRequest {
    pointPackageId: string;
    purchasePointPackageRequest?: PurchasePointPackageRequest;
}

/**
 * 
 */
export class PointPackageApi extends runtime.BaseAPI {

    /**
     */
    async apiPointpackagesGetRaw(requestParameters: ApiPointpackagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PointPackageListResponsePaginationResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['status'] != null) {
            queryParameters['Status'] = requestParameters['status'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/pointpackages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PointPackageListResponsePaginationResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPointpackagesGet(requestParameters: ApiPointpackagesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PointPackageListResponsePaginationResponse> {
        const response = await this.apiPointpackagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPointpackagesPaymentReturnGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/pointpackages/payment-return`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPointpackagesPaymentReturnGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPointpackagesPaymentReturnGetRaw(initOverrides);
    }

    /**
     */
    async apiPointpackagesPointPackageIdGetRaw(requestParameters: ApiPointpackagesPointPackageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PointPackageDetailResponse>> {
        if (requestParameters['pointPackageId'] == null) {
            throw new runtime.RequiredError(
                'pointPackageId',
                'Required parameter "pointPackageId" was null or undefined when calling apiPointpackagesPointPackageIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/pointpackages/{pointPackageId}`.replace(`{${"pointPackageId"}}`, encodeURIComponent(String(requestParameters['pointPackageId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PointPackageDetailResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiPointpackagesPointPackageIdGet(requestParameters: ApiPointpackagesPointPackageIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PointPackageDetailResponse> {
        const response = await this.apiPointpackagesPointPackageIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiPointpackagesPointPackageIdPurchasePostRaw(requestParameters: ApiPointpackagesPointPackageIdPurchasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pointPackageId'] == null) {
            throw new runtime.RequiredError(
                'pointPackageId',
                'Required parameter "pointPackageId" was null or undefined when calling apiPointpackagesPointPackageIdPurchasePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/pointpackages/{pointPackageId}/purchase`.replace(`{${"pointPackageId"}}`, encodeURIComponent(String(requestParameters['pointPackageId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PurchasePointPackageRequestToJSON(requestParameters['purchasePointPackageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiPointpackagesPointPackageIdPurchasePost(requestParameters: ApiPointpackagesPointPackageIdPurchasePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiPointpackagesPointPackageIdPurchasePostRaw(requestParameters, initOverrides);
    }

}
