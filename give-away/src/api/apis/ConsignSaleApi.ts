/* tslint:disable */
/* eslint-disable */
/**
 * Give Away API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConsignSaleDetailResponseListResult,
  ConsignSaleResponseResult,
  ConsignSaleStatus,
} from '../models/index';
import {
    ConsignSaleDetailResponseListResultFromJSON,
    ConsignSaleDetailResponseListResultToJSON,
    ConsignSaleResponseResultFromJSON,
    ConsignSaleResponseResultToJSON,
    ConsignSaleStatusFromJSON,
    ConsignSaleStatusToJSON,
} from '../models/index';

export interface ApiConsginsalesConsignsaleIdApprovalPutRequest {
    consignsaleId: string;
    consignStatus?: ConsignSaleStatus;
}

export interface ApiConsginsalesConsignsaleIdConfirmReceivedPutRequest {
    consignsaleId: string;
}

export interface ApiConsginsalesConsignsaleIdConsignsaledetailsGetRequest {
    consignsaleId: string;
}

export interface ApiConsginsalesConsignsaleIdGetRequest {
    consignsaleId: string;
}

/**
 * 
 */
export class ConsignSaleApi extends runtime.BaseAPI {

    /**
     */
    async apiConsginsalesConsignsaleIdApprovalPutRaw(requestParameters: ApiConsginsalesConsignsaleIdApprovalPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsignSaleResponseResult>> {
        if (requestParameters['consignsaleId'] == null) {
            throw new runtime.RequiredError(
                'consignsaleId',
                'Required parameter "consignsaleId" was null or undefined when calling apiConsginsalesConsignsaleIdApprovalPut().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['consignStatus'] != null) {
            queryParameters['consignStatus'] = requestParameters['consignStatus'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/consginsales/{consignsaleId}/approval`.replace(`{${"consignsaleId"}}`, encodeURIComponent(String(requestParameters['consignsaleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsignSaleResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiConsginsalesConsignsaleIdApprovalPut(requestParameters: ApiConsginsalesConsignsaleIdApprovalPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsignSaleResponseResult> {
        const response = await this.apiConsginsalesConsignsaleIdApprovalPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiConsginsalesConsignsaleIdConfirmReceivedPutRaw(requestParameters: ApiConsginsalesConsignsaleIdConfirmReceivedPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsignSaleResponseResult>> {
        if (requestParameters['consignsaleId'] == null) {
            throw new runtime.RequiredError(
                'consignsaleId',
                'Required parameter "consignsaleId" was null or undefined when calling apiConsginsalesConsignsaleIdConfirmReceivedPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/consginsales/{consignsaleId}/confirm-received`.replace(`{${"consignsaleId"}}`, encodeURIComponent(String(requestParameters['consignsaleId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsignSaleResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiConsginsalesConsignsaleIdConfirmReceivedPut(requestParameters: ApiConsginsalesConsignsaleIdConfirmReceivedPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsignSaleResponseResult> {
        const response = await this.apiConsginsalesConsignsaleIdConfirmReceivedPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiConsginsalesConsignsaleIdConsignsaledetailsGetRaw(requestParameters: ApiConsginsalesConsignsaleIdConsignsaledetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsignSaleDetailResponseListResult>> {
        if (requestParameters['consignsaleId'] == null) {
            throw new runtime.RequiredError(
                'consignsaleId',
                'Required parameter "consignsaleId" was null or undefined when calling apiConsginsalesConsignsaleIdConsignsaledetailsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/consginsales/{consignsaleId}/consignsaledetails`.replace(`{${"consignsaleId"}}`, encodeURIComponent(String(requestParameters['consignsaleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsignSaleDetailResponseListResultFromJSON(jsonValue));
    }

    /**
     */
    async apiConsginsalesConsignsaleIdConsignsaledetailsGet(requestParameters: ApiConsginsalesConsignsaleIdConsignsaledetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsignSaleDetailResponseListResult> {
        const response = await this.apiConsginsalesConsignsaleIdConsignsaledetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiConsginsalesConsignsaleIdGetRaw(requestParameters: ApiConsginsalesConsignsaleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsignSaleResponseResult>> {
        if (requestParameters['consignsaleId'] == null) {
            throw new runtime.RequiredError(
                'consignsaleId',
                'Required parameter "consignsaleId" was null or undefined when calling apiConsginsalesConsignsaleIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/consginsales/{consignsaleId}`.replace(`{${"consignsaleId"}}`, encodeURIComponent(String(requestParameters['consignsaleId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsignSaleResponseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiConsginsalesConsignsaleIdGet(requestParameters: ApiConsginsalesConsignsaleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsignSaleResponseResult> {
        const response = await this.apiConsginsalesConsignsaleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
